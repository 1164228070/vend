package com.haiyi.service.impl;

import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.haiyi.dao.ComsumeLogMapper;
import com.haiyi.domain.*;
import com.haiyi.netty.server.handler.auth.SessionUtil;
import com.haiyi.pay.GateWayService;
import com.haiyi.query.ComsumeLogQuery;
import com.haiyi.service.*;
import com.haiyi.utils.StatusConstant;
import com.maizi.exception.ExceptionKind;
import com.maizi.exception.KPException;
import com.maizi.utils.*;
import io.netty.channel.Channel;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
public class ComsumeLogServiceImpl implements ComsumeLogService {

    @Autowired
    ComsumeLogMapper comsumeLogMapper;

    @Autowired
    ComsumeDetailService comsumeDetailService;

    @Autowired
    ProductService productService;

    @Autowired
    MemberService memberService;

    @Autowired
    DevService devService;

    @Autowired
    AccountLogService accountLogService;

    @Autowired
    AgentService agentService;

    private static SnowflakeIdFactory snow = new SnowflakeIdFactory(1, 2);

    /**
     * 分页查找
     * @param e
     * @return
     */
    public PageInfo<ComsumeLog> findBySelective(ComsumeLogQuery e) {
        if (e.isPagination()) {
            PageHelper.startPage(e.getPageStart(), e.getPageSize());
            Page<ComsumeLog> list = (Page<ComsumeLog>) comsumeLogMapper.findBySelective(e);
            return list.toPageInfo();
        }
        return new PageInfo<ComsumeLog>(this.comsumeLogMapper.findBySelective(e));
    }


    @Override
    public ComsumeLog findByOrderId(String orderId) {
        return this.comsumeLogMapper.findByOrderId(orderId);
    }


    /**
     *  统一下单接口
     * @param memberId
     * @param orderNums
     * @param counts
     * @param devNum
     * @return
     * @throws KPException
     */
    @Override
    public Map<String, Object> unifiedorder(String memberId, Integer[] orderNums, Integer[] counts, String devNum) throws KPException {
        Dev dev = devService.findByNum(devNum);
        if (dev == null) {
            throw new KPException(ExceptionKind.BUSINESS_E, "当前设备不存在");
        }
        if (StatusConstant.DEV_STATUS_ONLINE != dev.getState()) {
            throw new KPException(ExceptionKind.BUSINESS_E, "当前设备不可用");
        }
        Member member = null;
        if (!StringUtil.isEmpty(memberId)) {
            member = memberService.findById(memberId);
            if (member == null) {
                throw new KPException(ExceptionKind.BUSINESS_E, "当前用户[" + memberId + "]不存在");
            }
        }
        ComsumeLog comsumeLog = new ComsumeLog();
        List<Product> productList = productService.findByOrderNums(devNum,orderNums);

        //总共购买商品的种类
        int productTypeCount = orderNums.length;
        if (productTypeCount != productList.size()) {
            throw new KPException(ExceptionKind.BUSINESS_E, "商品参数错误");
        }

        comsumeLog.setOrderId(String.valueOf(snow.nextId()));
        //TODO
        byte type = 2;
        comsumeLog.setTradeType(type);

        BigDecimal payAmount = BigDecimal.ZERO;
        for (int i = 0; i < productTypeCount; i++) {
            Product product = productList.get(i);
            //判断商品库存
            if (StatusConstant.PRODUCT_STATUS_ONLINE != product.getStatus()) {
                throw new KPException(ExceptionKind.BUSINESS_E, "当前商品已下架");
            }
            if (product.getStoreCount() < counts[i]) {
                throw new KPException(ExceptionKind.BUSINESS_E, "当前商品库存不足");
            }
            BigDecimal productPrice = product.getPrice();
            //扣除商品
            Product tempProduct = new Product();
            tempProduct.setId(product.getId());
            tempProduct.setStoreCount(product.getStoreCount() - counts[i]);     //目前一次只能购买一件商品
            tempProduct.setAgentId(product.getAgentId());
            //更新商品
            productService.updateStoreCount(tempProduct);
            payAmount = payAmount.add(productPrice.multiply(new BigDecimal(counts[i] + "")));
            //添加消费明细

            ComsumeDetail comsumeDetail = new ComsumeDetail();
            comsumeDetail.setOrderId(comsumeLog.getOrderId());
            comsumeDetail.setRefere(product.getId() + "");
            comsumeDetail.setOrderNum(product.getOrderNum());
            comsumeDetail.setProductName(product.getName());
            comsumeDetail.setBuyCount(counts[i]);
            comsumeDetail.setOriPrice(productPrice);
            comsumeDetail.setPrice(productPrice);
            comsumeDetail.setPayAmount(productPrice.multiply(new BigDecimal(counts[i] + "")));

            comsumeDetailService.add(comsumeDetail);
        }
        comsumeLog.setCreateDate(DateUtil.getCurrentDate());
        comsumeLog.setAgentId(dev.getAgentId());

        if (member != null) {
            comsumeLog.setMemberName(member.getName());
            comsumeLog.setCardNum(member.getCardNum());
        }
        comsumeLog.setPayAmount(payAmount);
        comsumeLog.setPayStatus(StatusConstant.PAY_STATUS_PAYING);

        comsumeLog.setDevName(dev.getName());       //设备名称
        comsumeLog.setDevNum(dev.getNum() + "");      //设备编号

        this.comsumeLogMapper.add(comsumeLog);

        Map<String, Object> result = new HashMap<String, Object>();
        result.put("orderId", comsumeLog.getOrderId());
        result.put("payAmount", comsumeLog.getPayAmount());
        return result;
    }

    @Override
    public void updateExceptionComsumeStatus(String orderId, Byte payStatus) {
        //修改消费记录状态
        updateStatus(orderId, payStatus);
        //修改库存数量
        List<ComsumeDetail> comsumeDetails = comsumeDetailService.findByOrderId(orderId);
        for (ComsumeDetail comsumeDetail : comsumeDetails) {
            Product product = productService.findById(Integer.parseInt(comsumeDetail.getRefere()));
            Product tempProduct = new Product();
            tempProduct.setId(product.getId());
            tempProduct.setStoreCount(product.getStoreCount() + comsumeDetail.getBuyCount());
            tempProduct.setAgentId(product.getAgentId());
            //更新商品
            productService.updateStoreCount(tempProduct);
        }
    }


    /**
     * 查找出货信息
     * @param orderId
     * @return
     */
    @Override
    public List<Map<String,Object>> findUnOutputInfo(String orderId) {
        return comsumeLogMapper.findUnOutputedInfo(orderId);
    }

    @Override
    public List<ComsumeDetail> findOuttingOrderByDevNum(String devNum) {
        Map<String,Object> result = comsumeLogMapper.findLastComsumeLogByPayStatus(devNum, StatusConstant.PAY_STATUS_PAIED);
        if(result!=null){
            //返回货到信息
            String orderId = result.get("orderId")+"";
            return comsumeDetailService.findByOrderId(orderId);
        }else{
            return null;
        }
    }

    /**
     * 更新订单状态
     *
     * @param orderId
     * @param payStatus
     * @return
     * @throws KPException
     */
    @Override
    public int updateStatus(String orderId, Byte payStatus) throws KPException {
        return comsumeLogMapper.updateStatus(orderId, payStatus);
    }

    @Override
    public int update(ComsumeLog comsumeLog) {
        return comsumeLogMapper.update(comsumeLog);
    }

    //----------------------------------支付回调-----------------------------------------//
    /**
     * 微信异步通知
     * @param notifyParam
     * @return
     */
    @Override
    public String nofificationWXPay(Map<String,String> notifyParam) {

        String orderId = notifyParam.get("out_trade_no");

            ComsumeLog comsumeLog = findByOrderId(orderId);
            if(comsumeLog==null){
                LogUtils.logWarn("微信推送支付成功信息,在本地却找不到该订单[{}]信息",orderId);
                return GateWayService.NOTIFY_FAIL;
            }else{
                if(StatusConstant.PAY_STATUS_PAIED==comsumeLog.getPayStatus()){
                    return GateWayService.NOTIFY_SUCCESS;
                }else{
                    //获取交易号
                    String out_transaction_id = notifyParam.get("out_transaction_id");
                    comsumeLog.setComsumeLog(out_transaction_id);//微信订单ID

                    comsumeLog.setPayStatus(StatusConstant.PAY_STATUS_PAIED);
                    //设置支付方式
                    comsumeLog.setPayType(StatusConstant.PAY_TYPE_WX);

                    //更新订单状态
                    update(comsumeLog);

                    //TODO 处理并发问题
                    agentService.updateLeftMoney(comsumeLog.getPayAmount(),comsumeLog.getAgentId());

                    String devNum = comsumeLog.getDevNum();

                    //DispatcherResponsePacket dispatcherResponsePacket = new DispatcherResponsePacket();
                    //拼接下发数据格式

                    //线程中运行
                    Channel channel = SessionUtil.getChannel(devNum);
                    if(channel==null){
                        LogUtils.logError("微信推送订单[{}]信息失败信息,设备掉线[{}]信息",orderId,devNum);
                    }else{
                        //准备推送数据
                        List<ComsumeDetail> comsumeDetails = comsumeDetailService.findByOrderId(comsumeLog.getOrderId());
                        List<Map<String,Object>> resultList = new ArrayList<Map<String,Object>>();
                        for(ComsumeDetail comsumeDetail : comsumeDetails){
                            Map<String,Object> resultTemp = new HashMap<String,Object>();
                            resultTemp.put("orderId",comsumeDetail.getOrderId());
                            resultTemp.put("buyCount",comsumeDetail.getBuyCount());
                            resultTemp.put("orderNum",comsumeDetail.getOrderNum());
                            resultList.add(resultTemp);
                        }
                      /*  dispatcherResponsePacket.setData(resultList);
                        dispatcherResponsePacket.setResult(true);
                        dispatcherResponsePacket.setMsg("推送成功");*/
                        new Thread(){
                            @Override
                            public void run() {
                                try {
                                    //主动推送
                                   //SessionUtil.dispatcherOrder(SessionUtil.getChannel(devNum),dispatcherResponsePacket);
                                }catch (Exception e){
                                    LogUtils.logError("推送失败",e);
                                }
                            }
                        }.start();
                    }
                    return GateWayService.NOTIFY_SUCCESS;
                }
            }
    }
}